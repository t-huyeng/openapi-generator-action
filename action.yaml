name: "Deutschland Generator Action"
description: "Generates a client library and docs from an OpenAPI description"
branding:
  icon: target
  color: green

inputs:
  openapi-file:
    description: "The path to the OpenAPI document to generate a client library for"
    required: true
    default: 'openapi.yaml'
  package-name:
    description: "Name of the package"
    required: true
    default: 'undefined'
  version:
    description: Version of the package
    required: true
    default: '1.0.0'
  upload-to-pypi:
    description: Should package be uploaded
    required: false
    default: false
  use-testpypi:
    description: "Upload ot testpypi (true) or pypi (false)"
    required: false
    default: true
  pypi-token:
    description: "Token to upload package to pypi"
    required: false
    default: 'undefined'

runs:
  using: composite
  steps:
    # Print params of invocation
    - name: "Print params of invocation for book keeping"
      run: |
        echo "Open Api File:" ${{ inputs.openapi-file }}
        echo "Package Name:" ${{ inputs.package-name }}
        echo "Version:" ${{ inputs.version }}
        echo "Upload-to-pypi:" ${{ inputs.upload-to-pypi }}
        echo "Use Testpypi:" ${{ inputs.use-testpypi }}
        echo "Pypi Token:" ${{ inputs.pypi-token }} | head -c14
      shell: bash


    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: "Checkout"
      uses: actions/checkout@v2

    - name: "setup python"
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: "Clean up existing generated code"
      run: |
        sudo rm -rf ${{ github.workspace }}/python-client
      shell: bash

    - name: "Generate Python Client"
      uses: openapi-generators/openapitools-generator-action@v1
      with:
        generator: python
        openapi-file: openapi.yaml
        config-file: generator_config.yaml

    - name: "Print dir after generation"
      run: |
        ls ${{ github.workspace }}
        ls ${{ github.workspace }}/python-client
      shell: bash

    - name: "execute py script" # run the run.py to get the latest data
      run: |
        python ${{ github.action_path }}/rename_generated_code.py  ${{ inputs.package-name }}
      shell: bash

    - name: "Remove not needed files"
      run: |
        echo "======================== Remove not needed files ===================================="
        rm -rf ${{ github.workspace }}/python-client/.gitlab-ci.yml
        rm -rf ${{ github.workspace }}/python-client/.travis.yml
        rm -rf ${{ github.workspace }}/python-client/git_push.sh
        ls ${{ github.workspace }}/python-client
      shell: bash

    - name: "Print python-client dir after renaming and move it into the deutschland subfolder"
      run: |
        echo "======================== Python client ===================================="
        ls ${{ github.workspace }}/python-client
        mkdir -p ${{ github.workspace }}/python-client/deutschland
        mv ${{ github.workspace }}/python-client/autobahn ${{ github.workspace }}/python-client/deutschland/autobahn
        cp ${{ github.action_path }}/__init__.py.template  ${{ github.workspace }}/python-client/deutschland/__init__.py
        echo "======================= Python client / Deutschland ======================"
        ls ${{ github.workspace }}/python-client/deutschland
      shell: bash

    - name: "generate sphinx-documentation"
      run: |
        pip install sphinx m2r2
        python ${{ github.action_path }}/create_doc.py ${{ inputs.package-name }} ${{ inputs.version }} de #TODO: lang also as input?
      shell: bash

    - uses: actions/upload-artifact@v2
      with:
        name: "documentation"
        path: ${{ github.workspace }}/python-client/sphinx-docs/_build # or path/to/artifact

    - name: "Delete generated sphinx doc after upload"
      run: |
        rm -rf ${{ github.workspace }}/python-client/sphinx-docs/_build
        rm -rf ${{ github.workspace }}/python-client/.gitignore
      shell: bash

    - name: "Install black and isort and use it to format code"
      run: |
        pip install black isort
        black ${{ github.workspace }}/python-client/
        isort ${{ github.workspace }}/python-client/
      shell: bash

    - name: "Add and Commit files"
      run: |
        git status
        git config --local user.email "bundesAPI@users.noreply.github.com"
        git config --local user.name "bundesbot"
        git add ${{ github.workspace }}/python-client
        git commit --allow-empty -m "Generate newest code from openapi.yaml" -a
      shell: bash

    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ github.token }}
        branch: ${{ github.ref }}

    - name: "Install pypa/build and twine for uploading"
      run: >-
        python -m
        pip install
        build twine
        --user
      shell: bash

    - name: "Build a binary wheel and a source tarball using build module"
      run: |
        cd ${{ github.workspace }}/python-client
        python -m build --sdist --wheel --outdir dist/
      shell: bash

    - uses: actions/upload-artifact@v2
      with:
        name: "postprocessed-code"
        path: ${{ github.workspace }}/python-client # or path/to/artifact

    # Upload to TestPyPI
    - name: Upload to TestPyPI using twine
      run: |
        cd ${{ github.workspace }}/python-client
        python -m twine upload --skip-existing dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ inputs.pypi-token }}
        TWINE_REPOSITORY: testpypi
      shell: bash
      if: ${{ inputs.upload-to-pypi }}

    - name: Print upload skip
      run: |
        echo "Skip upload due to input upload-to-pypi set to false"
      shell: bash
      if: ${{ !inputs.upload-to-pypi }}