name: "Deutschland Generator Action"
description: "Generates a client library and docs from an OpenAPI description"
branding:
  icon: target
  color: green

inputs:
  openapi-file:
    description: "The path to the OpenAPI document to generate a client library for"
    required: true
    default: "openapi.yaml"
  commit-to-git:
    description: "Should the generated code be added to git"
    required: false
    default: false
  upload-to-pypi:
    description: "Should package be uploaded to pypi"
    required: false
    default: false
  upload-to-testpypi:
    description: "Should package be uploaded to testpypi"
    required: false
    default: false
  pypi-token:
    description: "Token to upload package to pypi"
    required: false
    default: "undefined"
  testpypi-token:
    description: "Token to upload package to testpypi"
    required: false
    default: "undefined"
  python-version:
    description: "Python version to run on"
    required: true
    default: 3.7

runs:
  using: composite
  steps:
    # Print params of invocation
    - name: "Print params of invocation for book keeping"
      run: |
        echo "Open Api File:" ${{ inputs.openapi-file }}
        echo "Upload-to-pypi:" ${{ inputs.upload-to-pypi == 'true' }}
        echo "Upload-to-testpypi:" ${{ inputs.upload-to-testpypi == 'true'}}
        echo "Pypi Token:" ${{ inputs.pypi-token }} | head -c14
        echo -e "\nTestPypi Token:" ${{ inputs.testpypi-token }} | head -c18
        echo -e "\nPython Version:" ${{ inputs.python-version }}
      shell: bash

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: "Checkout"
      uses: actions/checkout@v3

    # - name: "check if branch exists"
    #   run: |
    #       git pull
    #       git config user.name github-actions
    #       git config user.email github-actions@github.com
    #       if git show-ref --quiet refs/heads/client-code; then
    #         echo develop branch exists
    #       else
    #         echo client-code branch does not exists
    #         git switch --orphan client-code
    #         git commit --allow-empty -m "added branch"
    #         git push -u origin client-code
    #       fi
    #   shell: bash

    # - name: "switch branch"
    #   run: |
    #     git checkout client-code
    #     git status
    #   shell: bash
    #   if: ${{ inputs.commit-to-git == 'true' }}

    - name: "setup python"
      uses: actions/setup-python@v2
      with:
        python-version: ${{ inputs.python-version }}

    - name: "Clean up existing generated code"
      run: |
        sudo rm -rf ${{ github.workspace }}/python-client
      shell: bash

    - name: "Copy deutschland templates into workspace if it not already exists"
      run: |
        cp -rn ${{ github.action_path }}/deutschland_templates ${{ github.workspace }}
        ls ${{ github.workspace }}
      shell: bash

    - name: "Generate Python Client"
      uses: openapi-generators/openapitools-generator-action@v1
      with:
        generator: python
        openapi-file: openapi.yaml
        config-file: generator_config.yaml

    - name: "Print dir after generation"
      run: |
        echo "======================== Github Workspace ===================================="
        ls ${{ github.workspace }}
        echo "======================== Python Client ===================================="
        ls ${{ github.workspace }}/python-client
      shell: bash


    - name: "execute py script" # run the run.py to get the latest data
      run: |
        python ${{ github.workspace }}/python-client/rename_generated_code.py
      shell: bash

    - name: "generate sphinx-documentation"
      run: |
        pip install sphinx m2r2
        python ${{ github.workspace }}/python-client/create_doc.py
      shell: bash

    - uses: actions/upload-artifact@v2
      with:
        name: "documentation"
        path: ${{ github.workspace }}/python-client/sphinx-docs/_build # or path/to/artifact

    - name: "Delete generated sphinx doc after upload and all files which are not needed"
      run: |
        echo "======================== Remove not needed files ===================================="
        rm -rf ${{ github.workspace }}/python-client/sphinx-docs/_build
        rm -rf ${{ github.workspace }}/python-client/.gitignore
        rm -rf ${{ github.workspace }}/python-client/.gitlab-ci.yml
        rm -rf ${{ github.workspace }}/python-client/.travis.yml
        rm -rf ${{ github.workspace }}/python-client/git_push.sh
        rm -rf ${{ github.workspace }}/python-client/rename_generated_code.py
        rm -rf ${{ github.workspace }}/python-client/create_doc.py
        rm -rf ${{ github.workspace }}/python-client/setup.cfg
        rm -rf ${{ github.workspace }}/python-client/setup.py
        ls ${{ github.workspace }}/python-client
      shell: bash

    - name: "Install black and isort and use it to format code"
      run: |
        pip install black isort
        black ${{ github.workspace }}/python-client/
        isort  --profile black ${{ github.workspace }}/python-client/
      shell: bash

    - name: "move file to client-folder"
      run: |
        mkdir -p clients
        mv ${{ github.workspace }}/python-client ${{ github.workspace }}/clients/
      shell: bash

    - uses: casperdcl/push-dir@v1
      with:
          message: update code
          branch: client-code
          dir: clients
          history: true
          name: github-action-bot
          email: github-action-bot@users.noreply.github.com

    # - uses: GuillaumeFalourd/git-commit-push@v1.3
    #   with:
    #     email: github-action-bot@users.noreply.github.com
    #     name: github-action-bot
    #     commit_message: update code
    #     target_branch: client-code
    #     files: clients
    #     access_token: ${{ github.token }}
    #     force: true
    #     empty: true
    # - name: "push to client-code branch"
    #   run: |
    #     git pull origin client-code
    #     date > generated.txt
    #     git status
    #     git add generated.txt
    #     git add ${{ github.workspace }}/python-client/
    #     git commit -m "generated new client code"
    #     git push origin client-code
    #   shell: bash
    #   if: ${{ inputs.commit-to-git == 'true' }}

    # - name: Deploy
    #   uses: s0/git-publish-subdir-action@develop
    #   env:
    #     REPO: self
    #     BRANCH: python-client
    #     FOLDER: python-client
    #     MESSAGE: "Generate newest code from openapi.yaml"
    #     GITHUB_TOKEN: ${{ github.token }}
    #   if: ${{ inputs.commit-to-git == 'true' }}

    # - name: "Add and Commit files to client-code branch"
    #   run: |
    #     git status
    #     git pull
    #     git config --local user.name "OpenAPI"
    #     git checkout -b client-code
    #     git add ${{ github.workspace }}/python-client
    #     git status
    #     git commit --allow-empty -m "Generate newest code from openapi.yaml" -a
    #   shell: bash
    #   if: ${{ inputs.commit-to-git == 'true' }}

    # - name: "Push changes to client-code branch"
    #   uses: ad-m/github-push-action@master
    #   with:
    #     github_token: ${{ github.token }}
    #     branch: client-code
    #     directory: python-client
    #   if: ${{ inputs.commit-to-git == 'true' }}

    - name: "Install pypa/build and twine for uploading"
      run: >-
        python -m
        pip install
        build twine
        --user
      shell: bash

    - name: "Build a binary wheel and a source tarball using build module"
      run: |
        cd ${{ github.workspace }}/clients/python-client
        python -m build --sdist --wheel --outdir dist/
      shell: bash

    - uses: actions/upload-artifact@v2
      with:
        name: "postprocessed-code"
        path: ${{ github.workspace }}/clients/python-client # or path/to/artifact

    # Upload to TestPyPI
    - name: Upload to TestPyPI using twine
      run: |
        cd ${{ github.workspace }}/clients/python-client
        python -m twine upload --skip-existing dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ inputs.testpypi-token }}
        TWINE_REPOSITORY: testpypi
      shell: bash
      if: ${{ inputs.upload-to-testpypi == 'true' }}

    - name: Print upload skip to pypi
      run: |
        echo "Skip upload to testpypi due to input upload-to-testpypi set to false"
      shell: bash
      if: ${{ inputs.upload-to-testpypi == 'false' }}

    # Upload to PyPI
    - name: Upload to TestPyPI using twine
      run: |
        cd ${{ github.workspace }}/clients/python-client
        python -m twine upload --skip-existing dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ inputs.pypi-token }}
        TWINE_REPOSITORY: pypi
      shell: bash
      if: ${{ inputs.upload-to-pypi == 'true' }}

    - name: Print upload skip to pypi
      run: |
        echo "Skip upload to Pypi due to input upload-to-pypi set to false"
      shell: bash
      if: ${{ inputs.upload-to-pypi == 'false' }}
